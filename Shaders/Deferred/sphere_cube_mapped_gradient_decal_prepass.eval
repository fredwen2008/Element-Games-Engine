#version 410

layout(triangles, equal_spacing, ccw) in;
in vec4 tcPosition[];
in vec2 tcTexCoord[];
in vec3 tcNormal[];
in vec3 tcBinormal[];
in vec3 tcBitangent[];
in float vertex_distance[];

out vec4 tePosition;
out vec2 teTexCoord;
out vec3 teNormal;
out vec3 teBinormal;
out vec3 teBitangent;
out vec3 teCubeMapTexCoord;
out float teHeightValue;

uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform mat4 normal_matrix;

uniform samplerCube height_map;

void main(){
	vec3 p0 = gl_TessCoord.x * tcPosition[0].xyz;
	vec3 p1 = gl_TessCoord.y * tcPosition[1].xyz;
	vec3 p2 = gl_TessCoord.z * tcPosition[2].xyz;

	vec3 n0 = gl_TessCoord.x * tcNormal[0];
	vec3 n1 = gl_TessCoord.y * tcNormal[1];
	vec3 n2 = gl_TessCoord.z * tcNormal[2];

	vec2 tc0 = gl_TessCoord.x * tcTexCoord[0];
	vec2 tc1 = gl_TessCoord.y * tcTexCoord[1];
	vec2 tc2 = gl_TessCoord.z * tcTexCoord[2];
	teTexCoord = tc0 + tc1 + tc2;

	vec4 position_temp = vec4(normalize(p0 + p1 + p2), 1.0);
	vec3 normal_temp = normalize(n0 + n1 + n2);
	teCubeMapTexCoord = normal_temp;

	float height = texture(height_map, teCubeMapTexCoord).y;
	teHeightValue = height;
	position_temp += vec4((normal_temp * ((height - 0.5) * 0.25)), 0.0);

	tePosition = model_matrix * position_temp;
	gl_Position = projection_matrix * view_matrix * tePosition;
	teNormal = normalize((normal_matrix * position_temp).xyz);//mat3(normal_matrix) * normal_temp;

	vec3 bn0 = gl_TessCoord.x * tcBinormal[0];
	vec3 bn1 = gl_TessCoord.y * tcBinormal[1];
	vec3 bn2 = gl_TessCoord.z * tcBinormal[2];
	teBinormal = mat3(normal_matrix) * normalize(bn0 + bn1 + bn2);

	vec3 bt0 = gl_TessCoord.x * tcBitangent[0];
	vec3 bt1 = gl_TessCoord.y * tcBitangent[1];
	vec3 bt2 = gl_TessCoord.z * tcBitangent[2];
	teBitangent = mat3(normal_matrix) * normalize(bt0 + bt1 + bt2);
}
