#version 410

layout(vertices = 3) out;

in vec4 vPosition[];
in vec2 vTexCoord[];
in vec3 vNormal[];
in vec3 vBinormal[];
in vec3 vBitangent[];

out vec4 tcPosition[];
out vec2 tcTexCoord[];
out vec3 tcNormal[];
out vec3 tcBinormal[];
out vec3 tcBitangent[];
out float vertex_distance[];

uniform vec3 camera_position;

void main(){
	tcPosition[gl_InvocationID] = vPosition[gl_InvocationID];
	tcTexCoord[gl_InvocationID] = vTexCoord[gl_InvocationID];
	tcNormal[gl_InvocationID] = vNormal[gl_InvocationID];
	tcBinormal[gl_InvocationID] = vBinormal[gl_InvocationID];
	tcBitangent[gl_InvocationID] = vBitangent[gl_InvocationID];

	float max_tessellation_level = 16.0;
	float max_draw_distance = 100.0;
	vertex_distance[gl_InvocationID] = abs(distance(camera_position, vPosition[gl_InvocationID].xyz));
	float tessellation_level = clamp((max_tessellation_level - (vertex_distance[gl_InvocationID] / max_draw_distance)) * max_tessellation_level, 1.0, max_tessellation_level);

	float TessLevelInner = tessellation_level;
	float TessLevelOuter = tessellation_level;

	if (gl_InvocationID == 0){
		gl_TessLevelInner[0] = TessLevelInner;
		gl_TessLevelOuter[0] = TessLevelOuter;
		gl_TessLevelOuter[1] = TessLevelOuter;
		gl_TessLevelOuter[2] = TessLevelOuter;
	}
}
